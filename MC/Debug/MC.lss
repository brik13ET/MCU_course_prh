
MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000512  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000512  000005a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080006a  0080006a  000005b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e11  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d3  00000000  00000000  00001501  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c5  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  0000279c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000407  00000000  00000000  00002910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a9  00000000  00000000  00002d17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000032c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	29 c1       	rjmp	.+594    	; 0x256 <__vector_1>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e2 e1       	ldi	r30, 0x12	; 18
  3e:	f5 e0       	ldi	r31, 0x05	; 5
  40:	02 c0       	rjmp	.+4      	; 0x46 <__SREG__+0x7>
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0
  46:	aa 36       	cpi	r26, 0x6A	; 106
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <__SREG__+0x3>

0000004c <__do_clear_bss>:
  4c:	20 e0       	ldi	r18, 0x00	; 0
  4e:	aa e6       	ldi	r26, 0x6A	; 106
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a4 38       	cpi	r26, 0x84	; 132
  58:	b2 07       	cpc	r27, r18
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	b5 d1       	rcall	.+874    	; 0x3c8 <main>
  5e:	57 c2       	rjmp	.+1198   	; 0x50e <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <ADC_Init>:

uint16_t avg = 0;

void ADC_Init(void)
{
	ADCSRA |= (1 << ADEN) |( 1 << ADPS0 ) | ( 1 << ADPS1 ) | ( 1 << ADPS2 );
  62:	86 b1       	in	r24, 0x06	; 6
  64:	87 68       	ori	r24, 0x87	; 135
  66:	86 b9       	out	0x06, r24	; 6
	ADMUX = (1 << REFS0) | 0;
  68:	80 e4       	ldi	r24, 0x40	; 64
  6a:	87 b9       	out	0x07, r24	; 7
	ADC_DDR = 0;
  6c:	1a ba       	out	0x1a, r1	; 26
	ADC_PORT = 0;
  6e:	1b ba       	out	0x1b, r1	; 27
  70:	08 95       	ret

00000072 <ADC_ReadChannel>:
	return avg;
}

uint16_t ADC_ReadChannel(uint8_t ch)
{
	ADMUX = (1 << REFS0) | 0;
  72:	90 e4       	ldi	r25, 0x40	; 64
  74:	97 b9       	out	0x07, r25	; 7
	ADC_DDR = 0;
  76:	1a ba       	out	0x1a, r1	; 26
	ADC_PORT = 0;
  78:	1b ba       	out	0x1b, r1	; 27
	if (ch >= 8)
  7a:	88 30       	cpi	r24, 0x08	; 8
  7c:	58 f4       	brcc	.+22     	; 0x94 <ADC_ReadChannel+0x22>
		return 0xFFFF;
	ADMUX |= ch;
  7e:	97 b1       	in	r25, 0x07	; 7
  80:	89 2b       	or	r24, r25
  82:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
  84:	86 b1       	in	r24, 0x06	; 6
  86:	80 64       	ori	r24, 0x40	; 64
  88:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA & (1<<ADSC)));
  8a:	36 99       	sbic	0x06, 6	; 6
  8c:	fe cf       	rjmp	.-4      	; 0x8a <ADC_ReadChannel+0x18>
	return ADC;
  8e:	84 b1       	in	r24, 0x04	; 4
  90:	95 b1       	in	r25, 0x05	; 5
  92:	08 95       	ret
{
	ADMUX = (1 << REFS0) | 0;
	ADC_DDR = 0;
	ADC_PORT = 0;
	if (ch >= 8)
		return 0xFFFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	9f ef       	ldi	r25, 0xFF	; 255
	ADMUX |= ch;
	ADCSRA |= (1<<ADSC);
	while((ADCSRA & (1<<ADSC)));
	return ADC;
  98:	08 95       	ret

0000009a <ADC_avg16>:
	ADC_DDR = 0;
	ADC_PORT = 0;
}

uint16_t ADC_avg16(uint8_t ch)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	d8 2f       	mov	r29, r24
	uint8_t sampli = 0;
//	uint16_t avg = 0;
//	for (chi = 0; chi < 8; chi ++)
	avg = 0;
  a0:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x1>
  a4:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
		for(sampli = 0; sampli < 16; sampli ++)
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	0d c0       	rjmp	.+26     	; 0xc6 <ADC_avg16+0x2c>
			avg += ADC_ReadChannel(ch);
  ac:	8d 2f       	mov	r24, r29
  ae:	e1 df       	rcall	.-62     	; 0x72 <ADC_ReadChannel>
  b0:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <__data_end>
  b4:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <__data_end+0x1>
  b8:	82 0f       	add	r24, r18
  ba:	93 1f       	adc	r25, r19
  bc:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
  c0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
{
	uint8_t sampli = 0;
//	uint16_t avg = 0;
//	for (chi = 0; chi < 8; chi ++)
	avg = 0;
		for(sampli = 0; sampli < 16; sampli ++)
  c4:	cf 5f       	subi	r28, 0xFF	; 255
  c6:	c0 31       	cpi	r28, 0x10	; 16
  c8:	88 f3       	brcs	.-30     	; 0xac <ADC_avg16+0x12>
			avg += ADC_ReadChannel(ch);
	avg >>= 4;
  ca:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
  ce:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
  d2:	92 95       	swap	r25
  d4:	82 95       	swap	r24
  d6:	8f 70       	andi	r24, 0x0F	; 15
  d8:	89 27       	eor	r24, r25
  da:	9f 70       	andi	r25, 0x0F	; 15
  dc:	89 27       	eor	r24, r25
  de:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
  e2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	return avg;
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <bcd_print>:

#include "displ.h"
#include "pins.h"

void bcd_print(uint16_t n)
{
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	2e 97       	sbiw	r28, 0x0e	; 14
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
 104:	ac 01       	movw	r20, r24
	uint8_t _7seg[] = {
 106:	8a e0       	ldi	r24, 0x0A	; 10
 108:	e0 e6       	ldi	r30, 0x60	; 96
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	de 01       	movw	r26, r28
 10e:	11 96       	adiw	r26, 0x01	; 1
 110:	01 90       	ld	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	8a 95       	dec	r24
 116:	e1 f7       	brne	.-8      	; 0x110 <bcd_print+0x24>
		0b1111111, // 8
		0b1101111  // 9
	};
	uint8_t i = 0;
	uint8_t bcd[] = {
		 n         / 1000,
 118:	8a 01       	movw	r16, r20
 11a:	16 95       	lsr	r17
 11c:	07 95       	ror	r16
 11e:	16 95       	lsr	r17
 120:	07 95       	ror	r16
 122:	16 95       	lsr	r17
 124:	07 95       	ror	r16
 126:	98 01       	movw	r18, r16
 128:	a5 ec       	ldi	r26, 0xC5	; 197
 12a:	b0 e2       	ldi	r27, 0x20	; 32
 12c:	e4 d1       	rcall	.+968    	; 0x4f6 <__umulhisi3>
 12e:	fc 01       	movw	r30, r24
 130:	f2 95       	swap	r31
 132:	e2 95       	swap	r30
 134:	ef 70       	andi	r30, 0x0F	; 15
 136:	ef 27       	eor	r30, r31
 138:	ff 70       	andi	r31, 0x0F	; 15
 13a:	ef 27       	eor	r30, r31
		0b0000111, // 7
		0b1111111, // 8
		0b1101111  // 9
	};
	uint8_t i = 0;
	uint8_t bcd[] = {
 13c:	eb 87       	std	Y+11, r30	; 0x0b
		 n         / 1000,
		(n % 1000) / 100,
 13e:	28 ee       	ldi	r18, 0xE8	; 232
 140:	33 e0       	ldi	r19, 0x03	; 3
 142:	e2 9f       	mul	r30, r18
 144:	c0 01       	movw	r24, r0
 146:	e3 9f       	mul	r30, r19
 148:	90 0d       	add	r25, r0
 14a:	f2 9f       	mul	r31, r18
 14c:	90 0d       	add	r25, r0
 14e:	11 24       	eor	r1, r1
 150:	9a 01       	movw	r18, r20
 152:	28 1b       	sub	r18, r24
 154:	39 0b       	sbc	r19, r25
 156:	36 95       	lsr	r19
 158:	27 95       	ror	r18
 15a:	36 95       	lsr	r19
 15c:	27 95       	ror	r18
 15e:	ab e7       	ldi	r26, 0x7B	; 123
 160:	b4 e1       	ldi	r27, 0x14	; 20
 162:	c9 d1       	rcall	.+914    	; 0x4f6 <__umulhisi3>
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
		0b0000111, // 7
		0b1111111, // 8
		0b1101111  // 9
	};
	uint8_t i = 0;
	uint8_t bcd[] = {
 168:	8c 87       	std	Y+12, r24	; 0x0c
		 n         / 1000,
		(n % 1000) / 100,
		(n % 100)  / 10,
 16a:	9a 01       	movw	r18, r20
 16c:	36 95       	lsr	r19
 16e:	27 95       	ror	r18
 170:	36 95       	lsr	r19
 172:	27 95       	ror	r18
 174:	c0 d1       	rcall	.+896    	; 0x4f6 <__umulhisi3>
 176:	9c 01       	movw	r18, r24
 178:	36 95       	lsr	r19
 17a:	27 95       	ror	r18
 17c:	64 e6       	ldi	r22, 0x64	; 100
 17e:	62 9f       	mul	r22, r18
 180:	c0 01       	movw	r24, r0
 182:	63 9f       	mul	r22, r19
 184:	90 0d       	add	r25, r0
 186:	11 24       	eor	r1, r1
 188:	9a 01       	movw	r18, r20
 18a:	28 1b       	sub	r18, r24
 18c:	39 0b       	sbc	r19, r25
 18e:	ad ec       	ldi	r26, 0xCD	; 205
 190:	bc ec       	ldi	r27, 0xCC	; 204
 192:	b1 d1       	rcall	.+866    	; 0x4f6 <__umulhisi3>
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
		0b0000111, // 7
		0b1111111, // 8
		0b1101111  // 9
	};
	uint8_t i = 0;
	uint8_t bcd[] = {
 1a0:	8d 87       	std	Y+13, r24	; 0x0d
		 n         / 1000,
		(n % 1000) / 100,
		(n % 100)  / 10,
		 n % 10,
 1a2:	9a 01       	movw	r18, r20
 1a4:	a8 d1       	rcall	.+848    	; 0x4f6 <__umulhisi3>
 1a6:	96 95       	lsr	r25
 1a8:	87 95       	ror	r24
 1aa:	96 95       	lsr	r25
 1ac:	87 95       	ror	r24
 1ae:	96 95       	lsr	r25
 1b0:	87 95       	ror	r24
 1b2:	9c 01       	movw	r18, r24
 1b4:	22 0f       	add	r18, r18
 1b6:	33 1f       	adc	r19, r19
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	82 0f       	add	r24, r18
 1c6:	93 1f       	adc	r25, r19
 1c8:	9a 01       	movw	r18, r20
 1ca:	28 1b       	sub	r18, r24
 1cc:	39 0b       	sbc	r19, r25
		0b0000111, // 7
		0b1111111, // 8
		0b1101111  // 9
	};
	uint8_t i = 0;
	uint8_t bcd[] = {
 1ce:	2e 87       	std	Y+14, r18	; 0x0e
		 n         / 1000,
		(n % 1000) / 100,
		(n % 100)  / 10,
		 n % 10,
	};
	for (i = 0; i < 4; i ++)
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	2a c0       	rjmp	.+84     	; 0x228 <__DATA_REGION_LENGTH__+0x28>
	{
		D_PORT = _7seg[bcd[i]];
 1d4:	eb e0       	ldi	r30, 0x0B	; 11
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	ec 0f       	add	r30, r28
 1da:	fd 1f       	adc	r31, r29
 1dc:	e8 0f       	add	r30, r24
 1de:	f1 1d       	adc	r31, r1
 1e0:	90 81       	ld	r25, Z
 1e2:	e1 e0       	ldi	r30, 0x01	; 1
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ec 0f       	add	r30, r28
 1e8:	fd 1f       	adc	r31, r29
 1ea:	e9 0f       	add	r30, r25
 1ec:	f1 1d       	adc	r31, r1
 1ee:	90 81       	ld	r25, Z
 1f0:	98 bb       	out	0x18, r25	; 24
		DC_PORT &= ~(DC_1_MASK | DC_2_MASK);
 1f2:	92 b3       	in	r25, 0x12	; 18
 1f4:	97 7e       	andi	r25, 0xE7	; 231
 1f6:	92 bb       	out	0x12, r25	; 18
		DC_PORT |=  (i & 1 ? DC_1_MASK : 0) | ( i & 2 ? DC_2_MASK : 0);
 1f8:	22 b3       	in	r18, 0x12	; 18
 1fa:	80 ff       	sbrs	r24, 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <__DATA_REGION_LENGTH__+0x2>
 1fe:	38 e0       	ldi	r19, 0x08	; 8
 200:	01 c0       	rjmp	.+2      	; 0x204 <__DATA_REGION_LENGTH__+0x4>
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	81 ff       	sbrs	r24, 1
 206:	02 c0       	rjmp	.+4      	; 0x20c <__DATA_REGION_LENGTH__+0xc>
 208:	90 e1       	ldi	r25, 0x10	; 16
 20a:	01 c0       	rjmp	.+2      	; 0x20e <__DATA_REGION_LENGTH__+0xe>
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	93 2b       	or	r25, r19
 210:	92 2b       	or	r25, r18
 212:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	3f e7       	ldi	r19, 0x7F	; 127
 216:	95 eb       	ldi	r25, 0xB5	; 181
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	31 50       	subi	r19, 0x01	; 1
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	20 40       	sbci	r18, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <__DATA_REGION_LENGTH__+0x1a>
 222:	00 c0       	rjmp	.+0      	; 0x224 <__DATA_REGION_LENGTH__+0x24>
 224:	00 00       	nop
		 n         / 1000,
		(n % 1000) / 100,
		(n % 100)  / 10,
		 n % 10,
	};
	for (i = 0; i < 4; i ++)
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	84 30       	cpi	r24, 0x04	; 4
 22a:	a0 f2       	brcs	.-88     	; 0x1d4 <bcd_print+0xe8>
		D_PORT = _7seg[bcd[i]];
		DC_PORT &= ~(DC_1_MASK | DC_2_MASK);
		DC_PORT |=  (i & 1 ? DC_1_MASK : 0) | ( i & 2 ? DC_2_MASK : 0);
		_delay_ms(70);
	}
}
 22c:	2e 96       	adiw	r28, 0x0e	; 14
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	f8 94       	cli
 232:	de bf       	out	0x3e, r29	; 62
 234:	0f be       	out	0x3f, r0	; 63
 236:	cd bf       	out	0x3d, r28	; 61
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	08 95       	ret

00000242 <DISP_Init>:

void DISP_Init(void)
{
	D_DDR |= D1_MASK | D2_MASK | D3_MASK | D4_MASK | D5_MASK | D6_MASK | D7_MASK | D_OFF_MASK;
 242:	87 b3       	in	r24, 0x17	; 23
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	87 bb       	out	0x17, r24	; 23
	D_PORT |= ~D_OFF_MASK;
 248:	88 b3       	in	r24, 0x18	; 24
 24a:	8f 67       	ori	r24, 0x7F	; 127
 24c:	88 bb       	out	0x18, r24	; 24
	DC_DDR |= DC_1_MASK | DC_2_MASK;
 24e:	81 b3       	in	r24, 0x11	; 17
 250:	88 61       	ori	r24, 0x18	; 24
 252:	81 bb       	out	0x11, r24	; 17
 254:	08 95       	ret

00000256 <__vector_1>:
	GICR  |= 1 << 6;
}


ISR(INT0_vect)
{
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
	return;
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <KEYPAD_Init>:
#include "displ.h"
#include <util/delay.h>

void KEYPAD_Init()
{
	KP_DDR |= KPA_MASK | KPB_MASK | KPC_MASK | KPD_MASK;
 26a:	84 b3       	in	r24, 0x14	; 20
 26c:	80 6f       	ori	r24, 0xF0	; 240
 26e:	84 bb       	out	0x14, r24	; 20
	KP_DDR &= ~(KP1_MASK | KP2_MASK | KP3_MASK);
 270:	84 b3       	in	r24, 0x14	; 20
 272:	88 7f       	andi	r24, 0xF8	; 248
 274:	84 bb       	out	0x14, r24	; 20
 276:	08 95       	ret

00000278 <getkey>:
}

key_t getkey()
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	27 97       	sbiw	r28, 0x07	; 7
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
	uint8_t maskc[] = {
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	89 83       	std	Y+1, r24	; 0x01
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	8a 83       	std	Y+2, r24	; 0x02
 294:	84 e0       	ldi	r24, 0x04	; 4
 296:	8b 83       	std	Y+3, r24	; 0x03
            KP1_MASK,
            KP2_MASK,
            KP3_MASK
	};
	uint8_t maskr[] = {
 298:	80 e1       	ldi	r24, 0x10	; 16
 29a:	8c 83       	std	Y+4, r24	; 0x04
 29c:	80 e2       	ldi	r24, 0x20	; 32
 29e:	8d 83       	std	Y+5, r24	; 0x05
 2a0:	80 e4       	ldi	r24, 0x40	; 64
 2a2:	8e 83       	std	Y+6, r24	; 0x06
 2a4:	80 e8       	ldi	r24, 0x80	; 128
 2a6:	8f 83       	std	Y+7, r24	; 0x07
            KPB_MASK,
            KPC_MASK,
            KPD_MASK
    };
	uint8_t i, j;
	for (i = 0; i < 4; i++)
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	28 c0       	rjmp	.+80     	; 0x2fc <getkey+0x84>
	{
		KP_PORT &= ~(
 2ac:	95 b3       	in	r25, 0x15	; 21
 2ae:	9f 70       	andi	r25, 0x0F	; 15
 2b0:	95 bb       	out	0x15, r25	; 21
            KPA_MASK |
            KPB_MASK |
            KPC_MASK |
            KPD_MASK
		);
		KP_PORT |= maskr[i];
 2b2:	25 b3       	in	r18, 0x15	; 21
 2b4:	e4 e0       	ldi	r30, 0x04	; 4
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	ec 0f       	add	r30, r28
 2ba:	fd 1f       	adc	r31, r29
 2bc:	e8 0f       	add	r30, r24
 2be:	f1 1d       	adc	r31, r1
 2c0:	90 81       	ld	r25, Z
 2c2:	92 2b       	or	r25, r18
 2c4:	95 bb       	out	0x15, r25	; 21
 2c6:	ef ec       	ldi	r30, 0xCF	; 207
 2c8:	f4 e8       	ldi	r31, 0x84	; 132
 2ca:	31 97       	sbiw	r30, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <getkey+0x52>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <getkey+0x58>
 2d0:	00 00       	nop
		_delay_ms(17);
		for(j = 0; j < 3; j ++)
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	10 c0       	rjmp	.+32     	; 0x2f6 <getkey+0x7e>
		{
			if (KP_PIN & maskc[j])
 2d6:	33 b3       	in	r19, 0x13	; 19
 2d8:	e1 e0       	ldi	r30, 0x01	; 1
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	ec 0f       	add	r30, r28
 2de:	fd 1f       	adc	r31, r29
 2e0:	e9 0f       	add	r30, r25
 2e2:	f1 1d       	adc	r31, r1
 2e4:	20 81       	ld	r18, Z
 2e6:	23 23       	and	r18, r19
 2e8:	29 f0       	breq	.+10     	; 0x2f4 <getkey+0x7c>
				return (key_t)(i * 3 + j);
 2ea:	28 2f       	mov	r18, r24
 2ec:	22 0f       	add	r18, r18
 2ee:	82 0f       	add	r24, r18
 2f0:	89 0f       	add	r24, r25
 2f2:	07 c0       	rjmp	.+14     	; 0x302 <getkey+0x8a>
            KPC_MASK |
            KPD_MASK
		);
		KP_PORT |= maskr[i];
		_delay_ms(17);
		for(j = 0; j < 3; j ++)
 2f4:	9f 5f       	subi	r25, 0xFF	; 255
 2f6:	93 30       	cpi	r25, 0x03	; 3
 2f8:	70 f3       	brcs	.-36     	; 0x2d6 <getkey+0x5e>
            KPB_MASK,
            KPC_MASK,
            KPD_MASK
    };
	uint8_t i, j;
	for (i = 0; i < 4; i++)
 2fa:	8f 5f       	subi	r24, 0xFF	; 255
 2fc:	84 30       	cpi	r24, 0x04	; 4
 2fe:	b0 f2       	brcs	.-84     	; 0x2ac <getkey+0x34>
			if (KP_PIN & maskc[j])
				return (key_t)(i * 3 + j);
			
		}
	}
    return k_none;
 300:	8c e0       	ldi	r24, 0x0C	; 12
}
 302:	27 96       	adiw	r28, 0x07	; 7
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <getnum>:

uint8_t getnum()
{
 314:	ff 92       	push	r15
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
	uint8_t res = 0, end = 0;
	key_t inp = k_none;
 31e:	cc e0       	ldi	r28, 0x0C	; 12
    return k_none;
}

uint8_t getnum()
{
	uint8_t res = 0, end = 0;
 320:	f1 2c       	mov	r15, r1
 322:	d0 e0       	ldi	r29, 0x00	; 0
	key_t inp = k_none;
	while (!end)
 324:	47 c0       	rjmp	.+142    	; 0x3b4 <getnum+0xa0>
	{
		do{
			bcd_print(res);
 326:	0d 2f       	mov	r16, r29
 328:	10 e0       	ldi	r17, 0x00	; 0
 32a:	c8 01       	movw	r24, r16
 32c:	df de       	rcall	.-578    	; 0xec <bcd_print>
			if (inp == k_none)
 32e:	cc 30       	cpi	r28, 0x0C	; 12
 330:	11 f4       	brne	.+4      	; 0x336 <getnum+0x22>
				inp = getkey();
 332:	a2 df       	rcall	.-188    	; 0x278 <getkey>
 334:	c8 2f       	mov	r28, r24
			switch(inp)
 336:	c9 30       	cpi	r28, 0x09	; 9
 338:	01 f1       	breq	.+64     	; 0x37a <getnum+0x66>
 33a:	68 f0       	brcs	.+26     	; 0x356 <getnum+0x42>
 33c:	cb 30       	cpi	r28, 0x0B	; 11
 33e:	a1 f0       	breq	.+40     	; 0x368 <getnum+0x54>
 340:	18 f0       	brcs	.+6      	; 0x348 <getnum+0x34>
 342:	cc 30       	cpi	r28, 0x0C	; 12
 344:	11 f1       	breq	.+68     	; 0x38a <getnum+0x76>
 346:	27 c0       	rjmp	.+78     	; 0x396 <getnum+0x82>
			{
				case k_0:
					res *= 10;
 348:	dd 0f       	add	r29, r29
 34a:	cd 2f       	mov	r28, r29
 34c:	cc 0f       	add	r28, r28
 34e:	cc 0f       	add	r28, r28
 350:	dc 0f       	add	r29, r28
					inp = k_none;
 352:	cc e0       	ldi	r28, 0x0C	; 12
					break;
 354:	20 c0       	rjmp	.+64     	; 0x396 <getnum+0x82>
				case k_5:
				case k_6:
				case k_7:
				case k_8:
				case k_9:
					res *= 10;
 356:	dd 0f       	add	r29, r29
 358:	8d 2f       	mov	r24, r29
 35a:	88 0f       	add	r24, r24
 35c:	88 0f       	add	r24, r24
 35e:	d8 0f       	add	r29, r24
					res += inp + 1;
 360:	dc 0f       	add	r29, r28
 362:	df 5f       	subi	r29, 0xFF	; 255
					inp = k_none;
 364:	cc e0       	ldi	r28, 0x0C	; 12
					break;
 366:	17 c0       	rjmp	.+46     	; 0x396 <getnum+0x82>
				case k_hash:
					res /= 10;
 368:	cd ec       	ldi	r28, 0xCD	; 205
 36a:	dc 9f       	mul	r29, r28
 36c:	d1 2d       	mov	r29, r1
 36e:	11 24       	eor	r1, r1
 370:	d6 95       	lsr	r29
 372:	d6 95       	lsr	r29
 374:	d6 95       	lsr	r29
					inp = k_none;
 376:	cc e0       	ldi	r28, 0x0C	; 12
					break;
 378:	0e c0       	rjmp	.+28     	; 0x396 <getnum+0x82>
				case k_star:
					end = !end;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	f1 10       	cpse	r15, r1
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	f8 2e       	mov	r15, r24
					inp = k_none;
 382:	cc e0       	ldi	r28, 0x0C	; 12
					break;
 384:	08 c0       	rjmp	.+16     	; 0x396 <getnum+0x82>
				case k_none:
					while( (inp = getkey()) && (inp == k_none)) bcd_print(res);
 386:	c8 01       	movw	r24, r16
 388:	b1 de       	rcall	.-670    	; 0xec <bcd_print>
 38a:	76 df       	rcall	.-276    	; 0x278 <getkey>
 38c:	c8 2f       	mov	r28, r24
 38e:	88 23       	and	r24, r24
 390:	11 f0       	breq	.+4      	; 0x396 <getnum+0x82>
 392:	8c 30       	cpi	r24, 0x0C	; 12
 394:	c1 f3       	breq	.-16     	; 0x386 <getnum+0x72>
 396:	2f ef       	ldi	r18, 0xFF	; 255
 398:	80 e7       	ldi	r24, 0x70	; 112
 39a:	92 e0       	ldi	r25, 0x02	; 2
 39c:	21 50       	subi	r18, 0x01	; 1
 39e:	80 40       	sbci	r24, 0x00	; 0
 3a0:	90 40       	sbci	r25, 0x00	; 0
 3a2:	e1 f7       	brne	.-8      	; 0x39c <getnum+0x88>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <getnum+0x92>
 3a6:	00 00       	nop
					break;
			}
			_delay_ms(100);
		}while (inp == k_star || inp == k_none);
 3a8:	c9 30       	cpi	r28, 0x09	; 9
 3aa:	09 f4       	brne	.+2      	; 0x3ae <getnum+0x9a>
 3ac:	bc cf       	rjmp	.-136    	; 0x326 <getnum+0x12>
 3ae:	cc 30       	cpi	r28, 0x0C	; 12
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <getnum+0xa0>
 3b2:	b9 cf       	rjmp	.-142    	; 0x326 <getnum+0x12>

uint8_t getnum()
{
	uint8_t res = 0, end = 0;
	key_t inp = k_none;
	while (!end)
 3b4:	ff 20       	and	r15, r15
 3b6:	09 f4       	brne	.+2      	; 0x3ba <getnum+0xa6>
 3b8:	b6 cf       	rjmp	.-148    	; 0x326 <getnum+0x12>
			}
			_delay_ms(100);
		}while (inp == k_star || inp == k_none);
	}
	return res;
}
 3ba:	8d 2f       	mov	r24, r29
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	ff 90       	pop	r15
 3c6:	08 95       	ret

000003c8 <main>:
uint16_t adc_values_current[8];

int main()
{
	//unsigned int baudrate = USART_CalcBaud(19200);
	DISP_Init();
 3c8:	3c df       	rcall	.-392    	; 0x242 <DISP_Init>
	KEYPAD_Init();
 3ca:	4f df       	rcall	.-354    	; 0x26a <KEYPAD_Init>
	ADC_Init();
 3cc:	4a de       	rcall	.-876    	; 0x62 <ADC_Init>
	LED_DDR |= (LED_MASK | LED_index_MASK | LED_value_MASK);
 3ce:	81 b3       	in	r24, 0x11	; 17
 3d0:	81 66       	ori	r24, 0x61	; 97
 3d2:	81 bb       	out	0x11, r24	; 17
	// uint8_t i, j; // c99 moment....
	for(uint8_t i = 0; i < sizeof(read_order)/sizeof(read_order[0]); i++)
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	06 c0       	rjmp	.+12     	; 0x3e4 <main+0x1c>
		read_order[i] = i;
 3d8:	e8 2f       	mov	r30, r24
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	e4 59       	subi	r30, 0x94	; 148
 3de:	ff 4f       	sbci	r31, 0xFF	; 255
 3e0:	80 83       	st	Z, r24
	DISP_Init();
	KEYPAD_Init();
	ADC_Init();
	LED_DDR |= (LED_MASK | LED_index_MASK | LED_value_MASK);
	// uint8_t i, j; // c99 moment....
	for(uint8_t i = 0; i < sizeof(read_order)/sizeof(read_order[0]); i++)
 3e2:	8f 5f       	subi	r24, 0xFF	; 255
 3e4:	88 30       	cpi	r24, 0x08	; 8
 3e6:	c0 f3       	brcs	.-16     	; 0x3d8 <main+0x10>
		read_order[i] = i;
	
	while (1)
	{
		for(uint8_t i = 0; i < sizeof(read_order)/sizeof(read_order[0]); i++)
 3e8:	f1 2c       	mov	r15, r1
 3ea:	5e c0       	rjmp	.+188    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		{
			adc_values_current[read_order[i]] = (uint32_t)ADC_avg16(read_order[i]) * 5000 / 1023;
 3ec:	0f 2d       	mov	r16, r15
 3ee:	10 e0       	ldi	r17, 0x00	; 0
 3f0:	04 59       	subi	r16, 0x94	; 148
 3f2:	1f 4f       	sbci	r17, 0xFF	; 255
 3f4:	d8 01       	movw	r26, r16
 3f6:	8c 91       	ld	r24, X
 3f8:	c8 2f       	mov	r28, r24
 3fa:	d0 e0       	ldi	r29, 0x00	; 0
 3fc:	4e de       	rcall	.-868    	; 0x9a <ADC_avg16>
 3fe:	9c 01       	movw	r18, r24
 400:	a8 e8       	ldi	r26, 0x88	; 136
 402:	b3 e1       	ldi	r27, 0x13	; 19
 404:	78 d0       	rcall	.+240    	; 0x4f6 <__umulhisi3>
 406:	2f ef       	ldi	r18, 0xFF	; 255
 408:	33 e0       	ldi	r19, 0x03	; 3
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	51 d0       	rcall	.+162    	; 0x4b2 <__udivmodsi4>
 410:	cc 0f       	add	r28, r28
 412:	dd 1f       	adc	r29, r29
 414:	cc 58       	subi	r28, 0x8C	; 140
 416:	df 4f       	sbci	r29, 0xFF	; 255
 418:	39 83       	std	Y+1, r19	; 0x01
 41a:	28 83       	st	Y, r18
			bcd_print(adc_values_current[read_order[i]]);
 41c:	d8 01       	movw	r26, r16
 41e:	ec 91       	ld	r30, X
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	ee 0f       	add	r30, r30
 424:	ff 1f       	adc	r31, r31
 426:	ec 58       	subi	r30, 0x8C	; 140
 428:	ff 4f       	sbci	r31, 0xFF	; 255
 42a:	80 81       	ld	r24, Z
 42c:	91 81       	ldd	r25, Z+1	; 0x01
 42e:	5e de       	rcall	.-836    	; 0xec <bcd_print>
			key_t key = getkey();
 430:	23 df       	rcall	.-442    	; 0x278 <getkey>
			if (key == k_star)
 432:	89 30       	cpi	r24, 0x09	; 9
 434:	79 f5       	brne	.+94     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
			{
				LED_PORT &= ~(LED_index_MASK | LED_value_MASK);
 436:	82 b3       	in	r24, 0x12	; 18
 438:	8f 79       	andi	r24, 0x9F	; 159
 43a:	82 bb       	out	0x12, r24	; 18
				LED_PORT |= LED_index_MASK;
 43c:	82 b3       	in	r24, 0x12	; 18
 43e:	80 62       	ori	r24, 0x20	; 32
 440:	82 bb       	out	0x12, r24	; 18
				uint8_t index = getnum();
 442:	68 df       	rcall	.-304    	; 0x314 <getnum>
 444:	c8 2f       	mov	r28, r24
				LED_PORT &= ~(LED_index_MASK | LED_value_MASK);
 446:	82 b3       	in	r24, 0x12	; 18
 448:	8f 79       	andi	r24, 0x9F	; 159
 44a:	82 bb       	out	0x12, r24	; 18
				LED_PORT |= LED_value_MASK;
 44c:	82 b3       	in	r24, 0x12	; 18
 44e:	80 64       	ori	r24, 0x40	; 64
 450:	82 bb       	out	0x12, r24	; 18
				uint8_t ord_num = getnum();
 452:	60 df       	rcall	.-320    	; 0x314 <getnum>
				LED_PORT &= ~(LED_index_MASK | LED_value_MASK);
 454:	92 b3       	in	r25, 0x12	; 18
 456:	9f 79       	andi	r25, 0x9F	; 159
 458:	92 bb       	out	0x12, r25	; 18
				if (index >= 8 || ord_num >= 8)
 45a:	c8 30       	cpi	r28, 0x08	; 8
 45c:	20 f5       	brcc	.+72     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 45e:	88 30       	cpi	r24, 0x08	; 8
 460:	10 f5       	brcc	.+68     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	15 c0       	rjmp	.+42     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
					continue;
				for(uint8_t j = 0; j < sizeof(read_order)/sizeof(read_order[0]); j++)
					if (read_order[j] == ord_num && j != index)
 466:	29 2f       	mov	r18, r25
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	f9 01       	movw	r30, r18
 46c:	e4 59       	subi	r30, 0x94	; 148
 46e:	ff 4f       	sbci	r31, 0xFF	; 255
 470:	40 81       	ld	r20, Z
 472:	84 13       	cpse	r24, r20
 474:	0c c0       	rjmp	.+24     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 476:	9c 17       	cp	r25, r28
 478:	51 f0       	breq	.+20     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
					{
						uint8_t tmp = read_order[index];
 47a:	ec 2f       	mov	r30, r28
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	e4 59       	subi	r30, 0x94	; 148
 480:	ff 4f       	sbci	r31, 0xFF	; 255
 482:	50 81       	ld	r21, Z
						read_order[index] = read_order[j];
 484:	40 83       	st	Z, r20
						read_order[j] = tmp;
 486:	f9 01       	movw	r30, r18
 488:	e4 59       	subi	r30, 0x94	; 148
 48a:	ff 4f       	sbci	r31, 0xFF	; 255
 48c:	50 83       	st	Z, r21
				LED_PORT |= LED_value_MASK;
				uint8_t ord_num = getnum();
				LED_PORT &= ~(LED_index_MASK | LED_value_MASK);
				if (index >= 8 || ord_num >= 8)
					continue;
				for(uint8_t j = 0; j < sizeof(read_order)/sizeof(read_order[0]); j++)
 48e:	9f 5f       	subi	r25, 0xFF	; 255
 490:	98 30       	cpi	r25, 0x08	; 8
 492:	48 f3       	brcs	.-46     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 494:	bf ef       	ldi	r27, 0xFF	; 255
 496:	e0 e7       	ldi	r30, 0x70	; 112
 498:	f2 e0       	ldi	r31, 0x02	; 2
 49a:	b1 50       	subi	r27, 0x01	; 1
 49c:	e0 40       	sbci	r30, 0x00	; 0
 49e:	f0 40       	sbci	r31, 0x00	; 0
 4a0:	e1 f7       	brne	.-8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a4:	00 00       	nop
	for(uint8_t i = 0; i < sizeof(read_order)/sizeof(read_order[0]); i++)
		read_order[i] = i;
	
	while (1)
	{
		for(uint8_t i = 0; i < sizeof(read_order)/sizeof(read_order[0]); i++)
 4a6:	f3 94       	inc	r15
 4a8:	27 e0       	ldi	r18, 0x07	; 7
 4aa:	2f 15       	cp	r18, r15
 4ac:	08 f0       	brcs	.+2      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4ae:	9e cf       	rjmp	.-196    	; 0x3ec <main+0x24>
 4b0:	9b cf       	rjmp	.-202    	; 0x3e8 <main+0x20>

000004b2 <__udivmodsi4>:
 4b2:	a1 e2       	ldi	r26, 0x21	; 33
 4b4:	1a 2e       	mov	r1, r26
 4b6:	aa 1b       	sub	r26, r26
 4b8:	bb 1b       	sub	r27, r27
 4ba:	fd 01       	movw	r30, r26
 4bc:	0d c0       	rjmp	.+26     	; 0x4d8 <__udivmodsi4_ep>

000004be <__udivmodsi4_loop>:
 4be:	aa 1f       	adc	r26, r26
 4c0:	bb 1f       	adc	r27, r27
 4c2:	ee 1f       	adc	r30, r30
 4c4:	ff 1f       	adc	r31, r31
 4c6:	a2 17       	cp	r26, r18
 4c8:	b3 07       	cpc	r27, r19
 4ca:	e4 07       	cpc	r30, r20
 4cc:	f5 07       	cpc	r31, r21
 4ce:	20 f0       	brcs	.+8      	; 0x4d8 <__udivmodsi4_ep>
 4d0:	a2 1b       	sub	r26, r18
 4d2:	b3 0b       	sbc	r27, r19
 4d4:	e4 0b       	sbc	r30, r20
 4d6:	f5 0b       	sbc	r31, r21

000004d8 <__udivmodsi4_ep>:
 4d8:	66 1f       	adc	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	88 1f       	adc	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	1a 94       	dec	r1
 4e2:	69 f7       	brne	.-38     	; 0x4be <__udivmodsi4_loop>
 4e4:	60 95       	com	r22
 4e6:	70 95       	com	r23
 4e8:	80 95       	com	r24
 4ea:	90 95       	com	r25
 4ec:	9b 01       	movw	r18, r22
 4ee:	ac 01       	movw	r20, r24
 4f0:	bd 01       	movw	r22, r26
 4f2:	cf 01       	movw	r24, r30
 4f4:	08 95       	ret

000004f6 <__umulhisi3>:
 4f6:	a2 9f       	mul	r26, r18
 4f8:	b0 01       	movw	r22, r0
 4fa:	b3 9f       	mul	r27, r19
 4fc:	c0 01       	movw	r24, r0
 4fe:	a3 9f       	mul	r26, r19
 500:	01 d0       	rcall	.+2      	; 0x504 <__umulhisi3+0xe>
 502:	b2 9f       	mul	r27, r18
 504:	70 0d       	add	r23, r0
 506:	81 1d       	adc	r24, r1
 508:	11 24       	eor	r1, r1
 50a:	91 1d       	adc	r25, r1
 50c:	08 95       	ret

0000050e <_exit>:
 50e:	f8 94       	cli

00000510 <__stop_program>:
 510:	ff cf       	rjmp	.-2      	; 0x510 <__stop_program>
